
service: serverless-nutri-backend

frameworkVersion: "3"

# plugins:
#   - serverless-offline
#  - serverless-domain-manager

custom:
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Length
    - Authorization
    - X-Amz-Date
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - app_id
    - app_food_name
#  customDomain:
#    domainName: api.notesapp.xyz
#    basePath: "v1"
#    stage: ${self:provider.stage}
#    certificateName: notesapp.xyz
#    createRoute53Record: true

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: prod
  memorySize: 128
  timeout: 5
  endpointType: REGIONAL
  environment:
    PRODUCE_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iam:
    role: arn:aws:iam::471112868617:role/LabRole
      

functions:
  add-food:
    handler: api/add-food.handler
    description: Adds a food item to the DynamoDB table.
    events:
      - http:
          path: food
          method: post
          cors: true
    environment:
      PRODUCE_TABLE: ${self:provider.environment.PRODUCE_TABLE} 
  
  update-food:
    handler: api/update-food.handler
    description: Updates a food item in the DynamoDB table.
    events:
      - http:
          path: food/{id} 
          method: patch  
          cors: true
    environment:
      PRODUCE_TABLE: ${self:provider.environment.PRODUCE_TABLE}


  get-foods:
    handler: api/get-foods.handler
    description: GET /foods
    events:
      - http:
          path: foods
          method: get
          cors: true
    environment:
      PRODUCE_TABLE: ${self:provider.environment.PRODUCE_TABLE}

  get-food:
    handler: api/get-food.handler
    description: GET /food/n/{food_id}
    events:
      - http:
          path: food/n/{food_id}
          method: get
          cors: true
    environment:
      PRODUCE_TABLE: ${self:provider.environment.PRODUCE_TABLE}

  delete-food:
    handler: api/delete-food.handler
    description: DELETE /food
    events:
      - http:
          path: food/{id} 
          method: delete
          cors: true
    environment:
      PRODUCE_TABLE: ${self:provider.environment.PRODUCE_TABLE}

resources:
  Resources:
    NotesTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.PRODUCE_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: foodName  # HASH key for the GSI
            AttributeType: S
          - AttributeName: category  # Adding sort key for the GSI
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH  # partition key
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: FoodNameIndex
            KeySchema:
              - AttributeName: foodName
                KeyType: HASH  # HASH key for the GSI
              - AttributeName: category
                KeyType: RANGE  # sort key for the GSI
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1


